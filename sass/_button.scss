@charset "UTF-8";
@import "variables/settings";
@import "mixins/z-depth";
@import "compass/css3/border-radius";
@import "compass/css3/box-shadow";
@import "compass/css3/transition";
@import "compass/css3/transform";

$button-shade: 16;
$button-angle: 30deg;

// button styles
button, .btn {
  // only displays text
  position: relative;
  border: none;
  @include border-radius(0);
  height: $button-box-size;
  min-width: $button-box-size * $golden;
  line-height: $button-font-size;
  font-family: inherit;
  font-size: $button-font-size;
  font-weight: inherit;
  color: $color-button-text;
  display: inline-block;
  outline: none;
  vertical-align: middle;
  text-align: center;
  cursor: pointer;
  padding: 0 (1em / $golden);
  background-color: $color-background;
  @include transition(transform 0.1s);
  @include perspective(900px);
  @include transform-style(preserve-3d);

  // no default tap active style
  -webkit-tap-highlight-color: transparent;

  &::before {
    // the actual button background & border
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    @include border-radius(inherit);
    z-index: -1;
    @include box-shadow(inset 0 0 0 ceil($button-box-size/2) $color-button);
    @include transition(transform 0.1s);
    @include transform-style(preserve-3d);
  }

  &::after {
    // the hidden face of the button cube
    content: '';
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    height: $button-thickness;
    @include transform(rotateX(-90deg));
    @include transform-origin($origin-x: 50%, $origin-y: 0);
    @include box-shadow(inset 0 0 0 $button-box-size/2 $color-button);
  }

  &:hover, &:active {
    color: $color-button;

    &::before, &::after {
      @include box-shadow(inset 0 0 0 $border-width);
    }
  }

  &:active {
    @include transform(rotateX($button-angle));
  }

  &.r {
    color: $color-button;
    &::before, &::after {
      @include box-shadow(inset 0 0 0 $border-width $color-button);
    }
    &:hover, &:active {
      color: $color-button-text;
      &::before {
        @include box-shadow(inset 0 0 0 ceil($button-box-size/2) $color-button);
      }
      &::after {
        @include box-shadow(inset 0 0 0 $button-box-size/2 shade($color-button, $button-shade), 0 -1px 0 $color-button);
      }
    }
  }

  &.u {
    color: $color-button;
    &::before, &::after {
      @include box-shadow(inset 0 0 0 $border-width $color-button);
    }
  }

  &.f {
    &:hover, &:active {
      color: $color-button-text;
      &::before {
        @include box-shadow(inset 0 0 0 ceil($button-box-size/2) $color-button);
      }
      &::after {
        @include box-shadow(inset 0 0 0 $button-box-size/2 shade($color-button, $button-shade), 0 -1px 0 $color-button);
      }
    }
  }

  &.n {
    color: $color-button;
    &::before {
      @include box-shadow(none);
    }

    &:hover, &:active {
      &::before {
        @include box-shadow(inset 0 0 0 $border-width $color-button);
      }
    }
  }

  // success button styles
  &.success {
    &::before, &::after {
      @include box-shadow(inset 0 0 0 ceil($button-box-size/2) $color-success);
    }
    &:hover, &:active {
      color: $color-success;
      &::before, &::after {
        @include box-shadow(inset 0 0 0 $border-width);
      }
    }

    &.r {
      color: $color-success;
      &::before, &::after {
        @include box-shadow(inset 0 0 0 $border-width $color-success);
      }
      &:hover, &:active {
        color: $color-button-text;
        &::before {
          @include box-shadow(inset 0 0 0 ceil($button-box-size/2) $color-success);
        }
        &::after {
          @include box-shadow(inset 0 0 0 $button-box-size/2 shade($color-success, $button-shade), 0 -1px 0 $color-success);
        }
      }
    }

    &.u {
      color: $color-success;
      &::before, &::after {
        @include box-shadow(inset 0 0 0 $border-width $color-success);
      }
    }

    &.f {
      &:hover, &:active {
        color: $color-button-text;
        &::before {
          @include box-shadow(inset 0 0 0 ceil($button-box-size/2) $color-success);
        }
        &::after {
          @include box-shadow(inset 0 0 0 $button-box-size/2 shade($color-success, $button-shade), 0 -1px 0 $color-success);
        }
      }
    }

    &.n {
      color: $color-success;
      &::before {
        @include box-shadow(none);
      }

      &:hover, &:active {
        &::before {
          @include box-shadow(inset 0 0 0 $border-width $color-success);
        }
      }
    }
  }

  // warning button styles
  &.warning {
    &::before, &::after {
      @include box-shadow(inset 0 0 0 ceil($button-box-size/2) $color-warning);
    }
    &:hover, &:active {
      color: $color-warning;
      &::before, &::after {
        @include box-shadow(inset 0 0 0 $border-width);
      }
    }

    &.r {
      color: $color-warning;
      &::before, &::after {
        @include box-shadow(inset 0 0 0 $border-width $color-warning);
      }
      &:hover, &:active {
        color: $color-button-text;
        &::before {
          @include box-shadow(inset 0 0 0 ceil($button-box-size/2) $color-warning);
        }
        &::after {
          @include box-shadow(inset 0 0 0 $button-box-size/2 shade($color-warning, $button-shade), 0 -1px 0 $color-warning);
        }
      }
    }

    &.u {
      color: $color-warning;
      &::before, &::after {
        @include box-shadow(inset 0 0 0 $border-width $color-warning);
      }
    }

    &.f {
      &:hover, &:active {
        color: $color-button-text;
        &::before {
          @include box-shadow(inset 0 0 0 ceil($button-box-size/2) $color-warning);
        }
        &::after {
          @include box-shadow(inset 0 0 0 $button-box-size/2 shade($color-warning, $button-shade), 0 -1px 0 $color-warning);
        }
      }
    }

    &.n {
      color: $color-warning;
      &::before {
        @include box-shadow(none);
      }

      &:hover, &:active {
        &::before {
          @include box-shadow(inset 0 0 0 $border-width $color-warning);
        }
      }
    }
  }

  &.square, &.round {
    width: $button-box-size;
    min-width: $button-box-size;
    padding: initial;
  }

  &.round {
    @include border-radius(50%);
    &::after {
      top: 50%;
      height: $button-box-size * (1 + 0.5 * (1 - sin($button-angle)));
      @include border-bottom-left-radius(50%);
      @include border-bottom-right-radius(50%);
      z-index: -2;
    }
  }

  &:disabled {
    &, &.f {
      cursor: default;
      &::before, &::after {
        @include box-shadow(inset 0 0 0 ceil($button-box-size/2) $color-button-disabled);
      }
      &:hover {
        color: $color-button-text;
      }
    }

    &.r, &.u {
      color: $color-button-disabled;
      &::before, &::after {
        @include box-shadow(inset 0 0 0 $border-width $color-button-disabled);
      }
      &:hover {
        color: $color-button-disabled;
      }
    }

    &.n {
      color: $color-button-disabled;
      &::before, &::after {
        @include box-shadow(none);
      }
      &:hover {
        color: $color-button-disabled;
      }
    }
  }
}